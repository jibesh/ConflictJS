!(function () {
  d3.geo.albersUsa = function () {
    function n(n) {
      var a = n[0],
        i = n[1];
      return (t = null), e(a, i), t || (r(a, i), t) || o(a, i), t;
    }
    var t,
      e,
      r,
      o,
      a = d3.geo.albers(),
      i = d3.geo
        .conicEqualArea()
        .rotate([154, 0])
        .center([-2, 58.5])
        .parallels([55, 65]),
      l = d3.geo
        .conicEqualArea()
        .rotate([157, 0])
        .center([-3, 19.9])
        .parallels([8, 18]),
      c = {
        point: function (n, e) {
          t = [n, e];
        },
      };
    return (
      (n.invert = function (n) {
        var t = a.scale(),
          e = a.translate(),
          r = (n[0] - e[0]) / t,
          o = (n[1] - e[1]) / t;
        return (
          o >= 0.12 && 0.234 > o && r >= -0.425 && -0.214 > r
            ? i
            : o >= 0.166 && 0.234 > o && r >= -0.214 && -0.115 > r
            ? l
            : a
        ).invert(n);
      }),
      (n.stream = function (n) {
        var t = a.stream(n),
          e = i.stream(n),
          r = l.stream(n);
        return {
          point: function (n, o) {
            t.point(n, o), e.point(n, o), r.point(n, o);
          },
          sphere: function () {
            t.sphere(), e.sphere(), r.sphere();
          },
          lineStart: function () {
            t.lineStart(), e.lineStart(), r.lineStart();
          },
          lineEnd: function () {
            t.lineEnd(), e.lineEnd(), r.lineEnd();
          },
          polygonStart: function () {
            t.polygonStart(), e.polygonStart(), r.polygonStart();
          },
          polygonEnd: function () {
            t.polygonEnd(), e.polygonEnd(), r.polygonEnd();
          },
        };
      }),
      (n.precision = function (t) {
        return arguments.length
          ? (a.precision(t), i.precision(t), l.precision(t), n)
          : a.precision();
      }),
      (n.scale = function (t) {
        return arguments.length
          ? (a.scale(t),
            i.scale(0.35 * t),
            l.scale(t),
            n.translate(a.translate()))
          : a.scale();
      }),
      (n.translate = function (t) {
        var s = 1e-5;
        if (!arguments.length) return a.translate();
        var p = a.scale(),
          u = +t[0],
          g = +t[1];
        return (
          (e = a
            .translate(t)
            .clipExtent([
              [u - 0.455 * p, g - 0.238 * p],
              [u + 0.455 * p, g + 0.238 * p],
            ])
            .stream(c).point),
          (r = i
            .translate([u - 0.307 * p, g + 0.201 * p])
            .clipExtent([
              [u - 0.425 * p + s, g + 0.12 * p + s],
              [u - 0.214 * p - s, g + 0.234 * p - s],
            ])
            .stream(c).point),
          (o = l
            .translate([u - 0.205 * p, g + 0.212 * p])
            .clipExtent([
              [u - 0.214 * p + s, g + 0.166 * p + s],
              [u - 0.115 * p - s, g + 0.234 * p - s],
            ])
            .stream(c).point),
          n
        );
      }),
      (n.getCompositionBorders = function () {
        var n = a([-102.91, 26.3]),
          t = a([-104, 27.5]),
          e = a([-108, 29.1]),
          r = a([-110, 29.1]),
          o = a([-110, 26.7]),
          i = a([-112.8, 27.6]),
          l = a([-114.3, 30.6]),
          c = a([-119.3, 30.1]);
        return (
          "M" +
          n[0] +
          " " +
          n[1] +
          "L" +
          t[0] +
          " " +
          t[1] +
          "L" +
          e[0] +
          " " +
          e[1] +
          "L" +
          r[0] +
          " " +
          r[1] +
          "M" +
          o[0] +
          " " +
          o[1] +
          "L" +
          i[0] +
          " " +
          i[1] +
          "L" +
          l[0] +
          " " +
          l[1] +
          "L" +
          c[0] +
          " " +
          c[1]
        );
      }),
      n.scale(1070)
    );
  };
})(),
  (function () {
    d3.geo.conicConformalEurope = function () {
      function n(n) {
        var p = n[0],
          u = n[1];
        return (
          (t = null),
          e(p, u),
          t ||
            (r(p, u), t) ||
            (o(p, u), t) ||
            (a(p, u), t) ||
            (i(p, u), t) ||
            (l(p, u), t) ||
            (c(p, u), t) ||
            s(p, u),
          t
        );
      }
      var t,
        e,
        r,
        o,
        a,
        i,
        l,
        c,
        s,
        p = d3.geo.conicConformal().center([43, 50]),
        u = d3.geo.conicConformal().center([-9.6, 26.4]),
        g = d3.geo.conicConformal().center([-16.9, 32.8]),
        f = d3.geo.conicConformal().center([-27.8, 38.6]),
        d = d3.geo.mercator().center([-61.46, 16.14]),
        E = d3.geo.mercator().center([-61.03, 14.67]),
        m = d3.geo.mercator().center([-53.2, 3.9]),
        y = d3.geo.mercator().center([55.52, -21.13]),
        S = {
          point: function (n, e) {
            t = [n, e];
          },
        };
      return (
        (n.invert = function (n) {
          var t = p.scale(),
            e = p.translate(),
            r = (n[0] - e[0]) / t,
            o = (n[1] - e[1]) / t;
          return (
            o >= -0.1474747 && -0.063727 > o && r >= -0.07551 && -0.009317 > r
              ? f
              : o >= -0.064887 &&
                -0.014785 > o &&
                r >= -0.057865 &&
                -0.014816 > r
              ? g
              : o >= -0.10779 && 0.067673 > o && r >= -0.1866 && 0.0255 > r
              ? u
              : o >= -0.05932 && -399e-6 > o && r >= 0.05412 && 0.0981 > r
              ? m
              : o >= 0.0163 && 0.046589 > o && r >= 0.05394 && 0.08707 > r
              ? y
              : o >= -0.09887 && -0.078675 > o && r >= 0.061618 && 0.079896 > r
              ? E
              : o >= -0.14517 && -0.11634 > o && r >= 0.05418 && 0.091114 > r
              ? d
              : p
          ).invert(n);
        }),
        (n.stream = function (n) {
          var t = p.stream(n),
            e = u.stream(n),
            r = g.stream(n),
            o = f.stream(n),
            a = d.stream(n),
            i = E.stream(n),
            l = m.stream(n),
            c = y.stream(n);
          return {
            point: function (n, s) {
              t.point(n, s),
                e.point(n, s),
                r.point(n, s),
                o.point(n, s),
                a.point(n, s),
                i.point(n, s),
                l.point(n, s),
                c.point(n, s);
            },
            sphere: function () {
              t.sphere(),
                e.sphere(),
                r.sphere(),
                o.sphere(),
                a.sphere(),
                i.sphere(),
                l.sphere(),
                c.sphere();
            },
            lineStart: function () {
              t.lineStart(),
                e.lineStart(),
                r.lineStart(),
                o.lineStart(),
                a.lineStart(),
                i.lineStart(),
                l.lineStart(),
                c.lineStart();
            },
            lineEnd: function () {
              t.lineEnd(),
                e.lineEnd(),
                r.lineEnd(),
                o.lineEnd(),
                a.lineEnd(),
                i.lineEnd(),
                l.lineEnd(),
                c.lineEnd();
            },
            polygonStart: function () {
              t.polygonStart(),
                e.polygonStart(),
                r.polygonStart(),
                o.polygonStart(),
                a.polygonStart(),
                i.polygonStart(),
                l.polygonStart(),
                c.polygonStart();
            },
            polygonEnd: function () {
              t.polygonEnd(),
                e.polygonEnd(),
                r.polygonEnd(),
                o.polygonEnd(),
                a.polygonEnd(),
                i.polygonEnd(),
                l.polygonEnd(),
                c.polygonEnd();
            },
          };
        }),
        (n.precision = function (t) {
          return arguments.length
            ? (p.precision(t),
              u.precision(t),
              g.precision(t),
              f.precision(t),
              d.precision(t),
              E.precision(t),
              m.precision(t),
              y.precision(t),
              n)
            : p.precision();
        }),
        (n.scale = function (t) {
          return arguments.length
            ? (p.scale(t),
              u.scale(1.3 * t),
              g.scale(1.8 * t),
              f.scale(0.9 * t),
              d.scale(1.8 * t),
              E.scale(1.8 * t),
              m.scale(0.7 * t),
              y.scale(1.8 * t),
              n.translate(p.translate()))
            : p.scale();
        }),
        (n.translate = function (t) {
          if (!arguments.length) return p.translate();
          var h = p.scale(),
            v = +t[0],
            L = +t[1];
          return (
            (e = p
              .translate(t)
              .clipExtent([
                [v - 0.6196 * h, L - 0.3579 * h],
                [v + 0.1287 * h, L + 0.3441 * h],
              ])
              .stream(S).point),
            (r = u
              .translate([v + 0.05 * h, L + 0.081 * h])
              .clipExtent([
                [v - 0.1174 * h, L + 0.0034 * h],
                [v - 0.0071 * h, L + 0.06234 * h],
              ])
              .stream(S).point),
            (o = g
              .translate([v - 0.04 * h, L - 0.04 * h])
              .clipExtent([
                [v - 0.0576 * h, L - 0.06489 * h],
                [v - 0.01482 * h, L - 0.01478 * h],
              ])
              .stream(S).point),
            (a = f
              .translate([v - 0.04 * h, L - 0.11 * h])
              .clipExtent([
                [v - 0.0755 * h, L - 0.14747 * h],
                [v + 0.00931 * h, L + 0.06373 * h],
              ])
              .stream(S).point),
            (i = d
              .translate([v + 0.07 * h, L - 0.13 * h])
              .clipExtent([
                [v + 0.05418 * h, L - 0.14517 * h],
                [v + 0.09111 * h, L - 0.11634 * h],
              ])
              .stream(S).point),
            (l = E.translate([v + 0.07 * h, L - 0.09 * h])
              .clipExtent([
                [v + 0.0616 * h, L - 0.0988 * h],
                [v + 0.0799 * h, L - 0.07867 * h],
              ])
              .stream(S).point),
            (c = m
              .translate([v + 0.07 * h, L - 0.03 * h])
              .clipExtent([
                [v + 0.0541 * h, L - 0.0593 * h],
                [v + 0.0981 * h, L - 4e-4 * h],
              ])
              .stream(S).point),
            (s = y
              .translate([v + 0.07 * h, L + 0.03 * h])
              .clipExtent([
                [v + 0.05394 * h, L + 0.0163 * h],
                [v + 0.087 * h, L + 0.046589 * h],
              ])
              .stream(S).point),
            n
          );
        }),
        (n.getCompositionBorders = function () {
          var n = p([53, 58]),
            t = p([53, 42]),
            e = p([35, 55.5]),
            r = p([35, 53]),
            o = p([57, 53.5]),
            a = p([54.5, 51]),
            i = p([54.5, 46]);
          return (
            "M" +
            n[0] +
            " " +
            n[1] +
            "L" +
            n[0] +
            " " +
            t[1] +
            "M" +
            n[0] +
            " " +
            e[1] +
            "L" +
            e[0] +
            " " +
            e[1] +
            "M" +
            n[0] +
            " " +
            r[1] +
            "L" +
            e[0] +
            " " +
            r[1] +
            "M" +
            n[0] +
            " " +
            o[1] +
            "L" +
            o[0] +
            " " +
            o[1] +
            "M" +
            n[0] +
            " " +
            a[1] +
            "L" +
            o[0] +
            " " +
            a[1] +
            "M" +
            n[0] +
            " " +
            i[1] +
            "L" +
            o[0] +
            " " +
            i[1] +
            "M" +
            e[0] +
            " " +
            n[1] +
            "L" +
            o[0] +
            " " +
            n[1] +
            "M" +
            e[0] +
            " " +
            n[1] +
            "L" +
            e[0] +
            " " +
            t[1] +
            "M" +
            e[0] +
            " " +
            t[1] +
            "L" +
            o[0] +
            " " +
            t[1] +
            "M" +
            o[0] +
            " " +
            t[1] +
            "L" +
            o[0] +
            " " +
            n[1]
          );
        }),
        n.scale(750)
      );
    };
  })(),
  (function () {
    d3.geo.conicConformalFrance = function () {
      function n(n) {
        var f = n[0],
          d = n[1];
        return (
          (t = null),
          s(f, d),
          t ||
            (r(f, d), t) ||
            (o(f, d), t) ||
            (a(f, d), t) ||
            (i(f, d), t) ||
            (l(f, d), t) ||
            (p(f, d), t) ||
            (u(f, d), t) ||
            (g(f, d), t) ||
            (c(f, d), t) ||
            e(f, d),
          t
        );
      }
      var t,
        e,
        r,
        o,
        a,
        i,
        l,
        c,
        s,
        p,
        u,
        g,
        f = d3.geo.conicConformal().center([13.5, 44]),
        d = d3.geo.mercator().center([-53.2, 3.9]),
        E = d3.geo.mercator().center([55.52, -21.13]),
        m = d3.geo.mercator().center([45.16, -12.8]),
        y = d3.geo.mercator().center([-61.03, 14.67]),
        S = d3.geo.mercator().center([-61.46, 16.14]),
        h = d3.geo.mercator().center([165.8, -21.07]),
        v = d3.geo.mercator().center([-150.55, -17.11]),
        L = d3.geo.mercator().center([-178.1, -14.3]),
        x = d3.geo.mercator().center([-56.23, 46.93]),
        M = d3.geo.mercator().center([-62.85, 17.92]),
        C = [
          [-9.9921301043373, 52],
          [4.393178805228727, 40.5],
        ],
        B = {
          point: function (n, e) {
            t = [n, e];
          },
        };
      return (
        (n.invert = function (n) {
          var t = f.scale(),
            e = f.translate(),
            r = (n[0] - e[0]) / t,
            o = (n[1] - e[1]) / t;
          return (
            o >= 0.04034 && 0.0698 > o && r >= -0.1209 && -0.0989 > r
              ? d
              : o >= 0.04586 && 0.066059 > o && r >= -0.0867 && -0.064618 > r
              ? E
              : o >= 0.04847 && 0.061225 > o && r >= -0.0994 && -0.08776 > r
              ? m
              : o >= 0.047607 && 0.064437 > o && r >= -0.14348 && -0.128253 > r
              ? y
              : o >= 0.045884 && 0.0651042 > o && r >= -0.168543 && -0.14392 > r
              ? S
              : o >= 0.073339 && 0.095485 > o && r >= -0.1859 && -0.15898 > r
              ? h
              : o >= 0.07364 && 0.09596 > o && r >= -0.15045 && -0.115476 > r
              ? v
              : o >= 0.080171 && 0.08799 > o && r >= -0.10993 && -0.100099 > r
              ? L
              : o >= 0.07679 && 0.091724 > o && r >= -0.08401 && -0.075126 > r
              ? x
              : o >= 0.0509 && 0.060076 > o && r >= -0.18453 && -0.174568 > r
              ? M
              : f
          ).invert(n);
        }),
        (n.stream = function (n) {
          var t = f.stream(n),
            e = d.stream(n),
            r = E.stream(n),
            o = m.stream(n),
            a = y.stream(n),
            i = S.stream(n),
            l = h.stream(n),
            c = v.stream(n),
            s = L.stream(n),
            p = x.stream(n),
            u = M.stream(n);
          return {
            point: function (n, g) {
              t.point(n, g),
                e.point(n, g),
                r.point(n, g),
                o.point(n, g),
                a.point(n, g),
                i.point(n, g),
                l.point(n, g),
                c.point(n, g),
                s.point(n, g),
                p.point(n, g),
                u.point(n, g);
            },
            sphere: function () {
              t.sphere(),
                e.sphere(),
                r.sphere(),
                o.sphere(),
                a.sphere(),
                i.sphere(),
                l.sphere(),
                c.sphere(),
                s.sphere(),
                p.sphere(),
                u.sphere();
            },
            lineStart: function () {
              t.lineStart(),
                e.lineStart(),
                r.lineStart(),
                o.lineStart(),
                a.lineStart(),
                i.lineStart(),
                l.lineStart(),
                c.lineStart(),
                s.lineStart(),
                p.lineStart(),
                u.lineStart();
            },
            lineEnd: function () {
              t.lineEnd(),
                e.lineEnd(),
                r.lineEnd(),
                o.lineEnd(),
                a.lineEnd(),
                i.lineEnd(),
                l.lineEnd(),
                c.lineEnd(),
                s.lineEnd(),
                p.lineEnd(),
                u.lineEnd();
            },
            polygonStart: function () {
              t.polygonStart(),
                e.polygonStart(),
                r.polygonStart(),
                o.polygonStart(),
                a.polygonStart(),
                i.polygonStart(),
                l.polygonStart(),
                c.polygonStart(),
                s.polygonStart(),
                p.polygonStart(),
                u.polygonStart();
            },
            polygonEnd: function () {
              t.polygonEnd(),
                e.polygonEnd(),
                r.polygonEnd(),
                o.polygonEnd(),
                a.polygonEnd(),
                i.polygonEnd(),
                l.polygonEnd(),
                c.polygonEnd(),
                s.polygonEnd(),
                p.polygonEnd(),
                u.polygonEnd();
            },
          };
        }),
        (n.precision = function (t) {
          return arguments.length
            ? (f.precision(t),
              d.precision(t),
              E.precision(t),
              m.precision(t),
              y.precision(t),
              S.precision(t),
              h.precision(t),
              v.precision(t),
              L.precision(t),
              x.precision(t),
              M.precision(t),
              n)
            : f.precision();
        }),
        (n.scale = function (t) {
          return arguments.length
            ? (f.scale(t),
              d.scale(0.35 * t),
              E.scale(1.2 * t),
              m.scale(1.5 * t),
              y.scale(1.5 * t),
              S.scale(1.2 * t),
              h.scale(0.3 * t),
              v.scale(0.6 * t),
              L.scale(2.4 * t),
              x.scale(1.2 * t),
              M.scale(4 * t),
              n.translate(f.translate()))
            : f.scale();
        }),
        (n.translate = function (t) {
          if (!arguments.length) return f.translate();
          var q = f.scale(),
            P = +t[0],
            b = +t[1],
            A = f(C[0]);
          (x0 = (P - A[0]) / q), (y0 = (b - A[1]) / q);
          var z = f(C[1]);
          return (
            (x1 = (P - z[0]) / q),
            (y1 = (b - z[1]) / q),
            (e = f
              .translate(t)
              .clipExtent([
                [P - 0.249 * q, b - 0.1215 * q],
                [P + 0.0987 * q, b + 0.06201 * q],
              ])
              .stream(B).point),
            (o = E.translate([P - 0.076 * q, b + 0.055 * q])
              .clipExtent([
                [P - 0.0867 * q, b + 0.045869 * q],
                [P - 0.064618 * q, b + 0.066059 * q],
              ])
              .stream(B).point),
            (a = m
              .translate([P - 0.093 * q, b + 0.054 * q])
              .clipExtent([
                [P - 0.0994 * q, b + 0.04847 * q],
                [P - 0.08776 * q, b + 0.0612257 * q],
              ])
              .stream(B).point),
            (r = d
              .translate([P - 0.113 * q, b + 0.055 * q])
              .clipExtent([
                [P - 0.12094 * q, b + 0.04034 * q],
                [P - 0.0989 * q, b + 0.0698 * q],
              ])
              .stream(B).point),
            (i = y
              .translate([P - 0.1365 * q, b + 0.055 * q])
              .clipExtent([
                [P - 0.14348 * q, b + 0.0476 * q],
                [P - 0.12825 * q, b + 0.064437 * q],
              ])
              .stream(B).point),
            (l = S.translate([P - 0.158 * q, b + 0.056 * q])
              .clipExtent([
                [P - 0.16854 * q, b + 0.045884 * q],
                [P - 0.14392 * q, b + 0.065104 * q],
              ])
              .stream(B).point),
            (g = M.translate([P - 0.18 * q, b + 0.055 * q])
              .clipExtent([
                [P - 0.18454 * q, b + 0.0509 * q],
                [P - 0.174569 * q, b + 0.06 * q],
              ])
              .stream(B).point),
            (c = h
              .translate([P - 0.172 * q, b + 0.083 * q])
              .clipExtent([
                [P - 0.1859 * q, b + 0.07334 * q],
                [P - 0.15898 * q, b + 0.09549 * q],
              ])
              .stream(B).point),
            (s = v
              .translate([P - 0.135 * q, b + 0.083 * q])
              .clipExtent([
                [P - 0.15045 * q, b + 0.07364 * q],
                [P - 0.11547 * q, b + 0.09596 * q],
              ])
              .stream(B).point),
            (p = L.translate([P - 0.105 * q, b + 0.084 * q])
              .clipExtent([
                [P - 0.10993 * q, b + 0.08017 * q],
                [P - 0.1 * q, b + 0.087995 * q],
              ])
              .stream(B).point),
            (u = x
              .translate([P - 0.078 * q, b + 0.085 * q])
              .clipExtent([
                [P - 0.08401 * q, b + 0.07679 * q],
                [P - 0.07512 * q, b + 0.09172 * q],
              ])
              .stream(B).point),
            n
          );
        }),
        (n.getCompositionBorders = function () {
          var n = f([7.1, 41.9]),
            t = f([-3.1, 42.6]),
            e = f([7.1, 39.8]),
            r = f([7.1, 38.2]),
            o = f([-1.8, 39.8]),
            a = f([0.4, 39.8]),
            i = f([2, 39.8]),
            l = f([4.3, 39.8]),
            c = f([5.4, 39.8]),
            s = f([-0.5, 38.2]),
            p = f([2.9, 38.2]),
            u = f([4.7, 38.2]);
          return (
            "M" +
            n[0] +
            " " +
            n[1] +
            "L" +
            t[0] +
            " " +
            n[1] +
            "M" +
            n[0] +
            " " +
            e[1] +
            "L" +
            t[0] +
            " " +
            e[1] +
            "M" +
            n[0] +
            " " +
            r[1] +
            "L" +
            t[0] +
            " " +
            r[1] +
            "M" +
            o[0] +
            " " +
            e[1] +
            "L" +
            o[0] +
            " " +
            n[1] +
            "M" +
            a[0] +
            " " +
            e[1] +
            "L" +
            a[0] +
            " " +
            n[1] +
            "M" +
            i[0] +
            " " +
            e[1] +
            "L" +
            i[0] +
            " " +
            n[1] +
            "M" +
            l[0] +
            " " +
            e[1] +
            "L" +
            l[0] +
            " " +
            n[1] +
            "M" +
            c[0] +
            " " +
            e[1] +
            "L" +
            c[0] +
            " " +
            n[1] +
            "M" +
            s[0] +
            " " +
            r[1] +
            "L" +
            s[0] +
            " " +
            e[1] +
            "M" +
            p[0] +
            " " +
            r[1] +
            "L" +
            p[0] +
            " " +
            e[1] +
            "M" +
            u[0] +
            " " +
            r[1] +
            "L" +
            u[0] +
            " " +
            e[1]
          );
        }),
        n.scale(2300)
      );
    };
  })(),
  (function () {
    d3.geo.conicConformalPortugal = function () {
      function n(n) {
        var a = n[0],
          i = n[1];
        return (t = null), e(a, i), t || (r(a, i), t) || o(a, i), t;
      }
      var t,
        e,
        r,
        o,
        a = d3.geo.conicConformal().center([-5, 38.5]),
        i = d3.geo.conicConformal().center([-16.9, 32.8]),
        l = d3.geo.conicConformal().center([-27.8, 38.6]),
        c = {
          point: function (n, e) {
            t = [n, e];
          },
        };
      return (
        (n.invert = function (n) {
          var t = a.scale(),
            e = a.translate(),
            r = (n[0] - e[0]) / t,
            o = (n[1] - e[1]) / t;
          return (
            o >= -0.059983 &&
            -0.004151 > o &&
            r >= -0.1186717 &&
            -0.07454468 > r
              ? l
              : o >= 0.0131739727 &&
                0.04100812 > o &&
                r >= -0.084925 &&
                -0.06100898 > r
              ? i
              : a
          ).invert(n);
        }),
        (n.stream = function (n) {
          var t = a.stream(n),
            e = i.stream(n),
            r = l.stream(n);
          return {
            point: function (n, o) {
              t.point(n, o), e.point(n, o), r.point(n, o);
            },
            sphere: function () {
              t.sphere(), e.sphere(), r.sphere();
            },
            lineStart: function () {
              t.lineStart(), e.lineStart(), r.lineStart();
            },
            lineEnd: function () {
              t.lineEnd(), e.lineEnd(), r.lineEnd();
            },
            polygonStart: function () {
              t.polygonStart(), e.polygonStart(), r.polygonStart();
            },
            polygonEnd: function () {
              t.polygonEnd(), e.polygonEnd(), r.polygonEnd();
            },
          };
        }),
        (n.precision = function (t) {
          return arguments.length
            ? (a.precision(t),
              madeiraPeninsule.precision(t),
              azoresPeninsule.precision(t),
              n)
            : a.precision();
        }),
        (n.scale = function (t) {
          return arguments.length
            ? (a.scale(t),
              i.scale(t),
              l.scale(0.6 * t),
              n.translate(a.translate()))
            : a.scale();
        }),
        (n.translate = function (t) {
          if (!arguments.length) return a.translate();
          var s = a.scale(),
            p = +t[0],
            u = +t[1];
          return (
            (e = a
              .translate(t)
              .clipExtent([
                [p - 0.0737 * s, u - 0.090189 * s],
                [p + 0.01636 * s, u + 0.04613 * s],
              ])
              .stream(c).point),
            (r = i
              .translate([p - 0.075 * s, u + 0.027 * s])
              .clipExtent([
                [p - 0.0849 * s, u + 0.01317 * s],
                [p - 0.061 * s, u + 0.041 * s],
              ])
              .stream(c).point),
            (o = l
              .translate([p - 0.095 * s, u - 0.035 * s])
              .clipExtent([
                [p - 0.1187 * s, u - 0.06 * s],
                [p - 0.07454 * s, u + 0.00415 * s],
              ])
              .stream(c).point),
            n
          );
        }),
        (n.getCompositionBorders = function () {
          var n = a([-10.65, 38.8]),
            t = a([-16, 41.4]),
            e = a([-10.34, 35.9]),
            r = a([-12, 36.8]);
          return (
            "M" +
            n[0] +
            " " +
            n[1] +
            "L" +
            n[0] +
            " " +
            t[1] +
            "L" +
            t[0] +
            " " +
            t[1] +
            "L" +
            t[0] +
            " " +
            n[1] +
            "L" +
            n[0] +
            " " +
            n[1] +
            "M" +
            e[0] +
            " " +
            e[1] +
            "L" +
            e[0] +
            " " +
            r[1] +
            "L" +
            r[0] +
            " " +
            r[1] +
            "L" +
            r[0] +
            " " +
            e[1] +
            "L" +
            e[0] +
            " " +
            e[1]
          );
        }),
        n.scale(3500)
      );
    };
  })(),
  (function () {
    d3.geo.conicConformalSpain = function () {
      function n(n) {
        var o = n[0],
          a = n[1];
        return (t = null), e(o, a), t || r(o, a), t;
      }
      var t,
        e,
        r,
        o = d3.geo.conicConformal().center([2, 37.5]),
        a = d3.geo.conicConformal().center([-9.6, 26.4]),
        i = {
          point: function (n, e) {
            t = [n, e];
          },
        };
      return (
        (n.invert = function (n) {
          var t = o.scale(),
            e = o.translate(),
            r = (n[0] - e[0]) / t,
            i = (n[1] - e[1]) / t;
          return (
            i >= 0.025779 && 0.067673 > i && r >= -0.1866 && -0.1 > r ? a : o
          ).invert(n);
        }),
        (n.stream = function (n) {
          var t = o.stream(n),
            e = a.stream(n);
          return {
            point: function (n, r) {
              t.point(n, r), e.point(n, r);
            },
            sphere: function () {
              t.sphere(), e.sphere();
            },
            lineStart: function () {
              t.lineStart(), e.lineStart();
            },
            lineEnd: function () {
              t.lineEnd(), e.lineEnd();
            },
            polygonStart: function () {
              t.polygonStart(), e.polygonStart();
            },
            polygonEnd: function () {
              t.polygonEnd(), e.polygonEnd();
            },
          };
        }),
        (n.precision = function (t) {
          return arguments.length
            ? (o.precision(t), a.precision(t), n)
            : o.precision();
        }),
        (n.scale = function (t) {
          return arguments.length
            ? (o.scale(t), a.scale(t), n.translate(o.translate()))
            : o.scale();
        }),
        (n.translate = function (t) {
          if (!arguments.length) return o.translate();
          var l = o.scale(),
            c = +t[0],
            s = +t[1];
          return (
            (e = o
              .translate(t)
              .clipExtent([
                [c - 0.1291 * l, s - 0.1683 * l],
                [c + 0.0309 * l, s + 0.0517 * l],
              ])
              .stream(i).point),
            (r = a
              .translate([c - 0.067 * l, s + 0.081 * l])
              .clipExtent([
                [c - 0.1866 * l, s + 0.02557 * l],
                [c - 0.10779 * l, s + 0.06767 * l],
              ])
              .stream(i).point),
            n
          );
        }),
        (n.getCompositionBorders = function () {
          var n = o([-13, 35.3]),
            t = o([-6.4, 34]);
          return (
            "M" +
            n[0] +
            " " +
            n[1] +
            "L" +
            t[0] +
            " " +
            n[1] +
            "L" +
            t[0] +
            " " +
            t[1]
          );
        }),
        n.scale(2500)
      );
    };
  })(),
  (function () {
    d3.geo.conicEquidistantJapan = function () {
      function n(n) {
        var a = n[0],
          i = n[1];
        return (t = null), e(a, i), t || (r(a, i), t) || o(a, i), t;
      }
      var t,
        e,
        r,
        o,
        a = d3.geo.conicEquidistant().rotate([-139, -36]).parallels([40, 34]),
        i = d3.geo.conicEquidistant().rotate([-149, -40]).parallels([40, 34]),
        l = d3.geo.conicEquidistant().rotate([-131, -33]).parallels([40, 34]),
        c = {
          point: function (n, e) {
            t = [n, e];
          },
        };
      return (
        (n.invert = function (n) {
          var t = a.scale(),
            e = a.translate(),
            r = (n[0] - e[0]) / t,
            o = (n[1] - e[1]) / t;
          return (
            o >= -0.11056 && -0.02793 > o && r >= -0.141448 && -0.00305 > r
              ? i
              : o >= 0.041035 && 0.1134101 > o && r >= -0.10997 && 0.018914 > r
              ? l
              : a
          ).invert(n);
        }),
        (n.stream = function (n) {
          var t = a.stream(n),
            e = i.stream(n),
            r = l.stream(n);
          return {
            point: function (n, o) {
              t.point(n, o), e.point(n, o), r.point(n, o);
            },
            sphere: function () {
              t.sphere(), e.sphere(), r.sphere();
            },
            lineStart: function () {
              t.lineStart(), e.lineStart(), r.lineStart();
            },
            lineEnd: function () {
              t.lineEnd(), e.lineEnd(), r.lineEnd();
            },
            polygonStart: function () {
              t.polygonStart(), e.polygonStart(), r.polygonStart();
            },
            polygonEnd: function () {
              t.polygonEnd(), e.polygonEnd(), r.polygonEnd();
            },
          };
        }),
        (n.precision = function (t) {
          return arguments.length
            ? (a.precision(t), i.precision(t), l.precision(t), n)
            : a.precision();
        }),
        (n.scale = function (t) {
          return arguments.length
            ? (a.scale(t),
              i.scale(t),
              l.scale(0.7 * t),
              n.translate(a.translate()))
            : a.scale();
        }),
        (n.translate = function (t) {
          if (!arguments.length) return a.translate();
          var s = a.scale(),
            p = +t[0],
            u = +t[1];
          return (
            (e = a
              .translate(t)
              .clipExtent([
                [p - 0.19 * s, u - 0.113 * s],
                [p + 0.0753 * s, u + 0.1026 * s],
              ])
              .stream(c).point),
            (r = i
              .translate(t)
              .clipExtent([
                [p - 0.15 * s, u - 0.1103 * s],
                [p - 0.0031 * s, u - 0.0279 * s],
              ])
              .stream(c).point),
            (o = l
              .translate(t)
              .clipExtent([
                [p - 0.11 * s, u + 0.041 * s],
                [p + 0.0189 * s, u + 0.113 * s],
              ])
              .stream(c).point),
            n
          );
        }),
        (n.getCompositionBorders = function () {
          var n = a([130, 36.5]),
            t = a([135, 36]),
            e = a([138, 39.8]),
            r = a([132, 29.8]),
            o = a([134, 32]),
            i = a([139, 33.7]),
            l = a([139, 30.5]);
          return (
            "M" +
            n[0] +
            " " +
            n[1] +
            "L" +
            t[0] +
            " " +
            n[1] +
            "L" +
            e[0] +
            " " +
            e[1] +
            "M" +
            r[0] +
            " " +
            r[1] +
            "L" +
            o[0] +
            " " +
            o[1] +
            "L" +
            i[0] +
            " " +
            i[1] +
            "L" +
            i[0] +
            " " +
            l[1]
          );
        }),
        n.scale(2228)
      );
    };
  })(),
  (function () {
    d3.geo.mercatorEcuador = function () {
      function n(n) {
        var o = n[0],
          a = n[1];
        return (t = null), e(o, a), t || r(o, a), t;
      }
      var t,
        e,
        r,
        o = d3.geo.mercator().center([-76.7, 0]),
        a = d3.geo.mercator().center([-88.5, -1.5]),
        i = {
          point: function (n, e) {
            t = [n, e];
          },
        };
      return (
        (n.invert = function (n) {
          var t = o.scale(),
            e = o.translate(),
            r = (n[0] - e[0]) / t,
            i = (n[1] - e[1]) / t;
          return (
            i >= -0.031306 && 0.010238 > i && r >= -0.139577 && -0.080236 > r
              ? a
              : o
          ).invert(n);
        }),
        (n.stream = function (n) {
          var t = o.stream(n),
            e = a.stream(n);
          return {
            point: function (n, r) {
              t.point(n, r), e.point(n, r);
            },
            sphere: function () {
              t.sphere(), e.sphere();
            },
            lineStart: function () {
              t.lineStart(), e.lineStart();
            },
            lineEnd: function () {
              t.lineEnd(), e.lineEnd();
            },
            polygonStart: function () {
              t.polygonStart(), e.polygonStart();
            },
            polygonEnd: function () {
              t.polygonEnd(), e.polygonEnd();
            },
          };
        }),
        (n.precision = function (t) {
          return arguments.length
            ? (o.precision(t), galapagosPeninsule.precision(t), n)
            : o.precision();
        }),
        (n.scale = function (t) {
          return arguments.length
            ? (o.scale(t), a.scale(t), n.translate(o.translate()))
            : o.scale();
        }),
        (n.translate = function (t) {
          if (!arguments.length) return o.translate();
          var l = o.scale(),
            c = +t[0],
            s = +t[1];
          return (
            (e = o
              .translate([c, s - 0.025 * l])
              .clipExtent([
                [c - 0.0838 * l, s - 0.0721 * l],
                [c + 0.0297 * l, s + 0.0799 * l],
              ])
              .stream(i).point),
            (r = a
              .translate([c - 0.075 * l, s - 0.02 * l])
              .clipExtent([
                [c - 0.1396 * l, s - 0.0563 * l],
                [c - 0.0837 * l, s - 0.0147 * l],
              ])
              .stream(i).point),
            n
          );
        }),
        (n.getCompositionBorders = function () {
          var n = o([-81.5, 1.8]),
            t = o([-89, -0.6]);
          return (
            "M" +
            n[0] +
            " " +
            n[1] +
            "L" +
            n[0] +
            " " +
            t[1] +
            "L" +
            t[0] +
            " " +
            t[1]
          );
        }),
        n.scale(3500)
      );
    };
  })(),
  (function () {
    d3.geo.transverseMercatorChile = function () {
      function n(n) {
        var i = n[0],
          l = n[1];
        return (
          (t = null), e(i, l), t || (r(i, l), t) || (o(i, l), t) || a(i, l), t
        );
      }
      var t,
        e,
        r,
        o,
        a,
        i = d3.geo.transverseMercator().rotate([72, 37]),
        l = d3.geo.stereographic().rotate([72, 0]),
        c = d3.geo.mercator().center([-80, -33.5]),
        s = d3.geo.mercator().center([-109.4, -27.1]),
        p = {
          point: function (n, e) {
            t = [n, e];
          },
        };
      return (
        (n.invert = function (n) {
          var t = i.scale(),
            e = i.translate(),
            r = (n[0] - e[0]) / t,
            o = (n[1] - e[1]) / t;
          return (
            o >= -0.1512 && -0.063424 > o && r >= -0.13689 && -0.032168 > r
              ? s
              : o >= -0.06565 && -0.034257 > o && r >= -0.12618 && -0.04764 > r
              ? c
              : o >= 0.2582 && 0.32 > o && r >= -0.106579 && -0.07 > r
              ? l
              : i
          ).invert(n);
        }),
        (n.stream = function (n) {
          var t = i.stream(n),
            e = l.stream(n),
            r = c.stream(n),
            o = s.stream(n);
          return {
            point: function (n, a) {
              t.point(n, a), e.point(n, a), r.point(n, a), o.point(n, a);
            },
            sphere: function () {
              t.sphere(), e.sphere(), r.sphere(), o.sphere();
            },
            lineStart: function () {
              t.lineStart(), e.lineStart(), r.lineStart(), o.lineStart();
            },
            lineEnd: function () {
              t.lineEnd(), e.lineEnd(), r.lineEnd(), o.lineEnd();
            },
            polygonStart: function () {
              t.polygonStart(),
                e.polygonStart(),
                r.polygonStart(),
                o.polygonStart();
            },
            polygonEnd: function () {
              t.polygonEnd(), e.polygonEnd(), r.polygonEnd(), o.polygonEnd();
            },
          };
        }),
        (n.precision = function (t) {
          return arguments.length
            ? (i.precision(t),
              l.precision(t),
              c.precision(t),
              s.precision(t),
              n)
            : i.precision();
        }),
        (n.scale = function (t) {
          return arguments.length
            ? (i.scale(t),
              l.scale(0.15 * t),
              c.scale(1.5 * t),
              s.scale(1.5 * t),
              n.translate(i.translate()))
            : i.scale();
        }),
        (n.translate = function (t) {
          if (!arguments.length) return i.translate();
          var u = i.scale(),
            g = +t[0],
            f = +t[1];
          return (
            (e = i
              .translate(t)
              .clipExtent([
                [g - 0.0844 * u, f - 0.3821 * u],
                [g + 0.0784 * u, f + 0.4068 * u],
              ])
              .stream(p).point),
            (r = l
              .translate([g - 0.09 * u, f + 0.17 * u])
              .clipExtent([
                [g - 0.1065 * u, f + 0.2582 * u],
                [g - 0.07 * u, f + 0.32 * u],
              ])
              .stream(p).point),
            (o = c
              .translate([g - 0.1 * u, f - 0.05 * u])
              .clipExtent([
                [g - 0.1261799 * u, f - 0.0656526 * u],
                [g - 0.04764 * u, f - 0.0342567 * u],
              ])
              .stream(p).point),
            (a = s
              .translate([g - 0.095 * u, f - 0.09 * u])
              .clipExtent([
                [g - 0.1419 * u, f - 0.1112 * u],
                [g - 0.0371 * u, f - 0.0234 * u],
              ])
              .stream(p).point),
            n
          );
        }),
        (n.getCompositionBorders = function () {
          var n = i([-82, -50.5]),
            t = i([-79, -56]),
            e = i([-81, -33.2]),
            r = i([-76, -35.3]),
            o = i([-79.5, -30.9]),
            a = i([-77.3, -32.5]);
          return (
            "M" +
            n[0] +
            " " +
            n[1] +
            "L" +
            n[0] +
            " " +
            t[1] +
            "L" +
            t[0] +
            " " +
            t[1] +
            "L" +
            t[0] +
            " " +
            n[1] +
            "L" +
            n[0] +
            " " +
            n[1] +
            "M" +
            e[0] +
            " " +
            e[1] +
            "L" +
            e[0] +
            " " +
            r[1] +
            "L" +
            r[0] +
            " " +
            r[1] +
            "L" +
            r[0] +
            " " +
            e[1] +
            "L" +
            e[0] +
            " " +
            e[1] +
            "M" +
            o[0] +
            " " +
            o[1] +
            "L" +
            o[0] +
            " " +
            a[1] +
            "L" +
            a[0] +
            " " +
            a[1] +
            "L" +
            a[0] +
            " " +
            o[1] +
            "L" +
            o[0] +
            " " +
            o[1]
          );
        }),
        n.scale(1e3)
      );
    };
  })();
